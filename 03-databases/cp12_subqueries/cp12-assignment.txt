1.Explain a subquery in your own words.
    a search within a seach

2.Where can you use a subquery within a SELECT statement?
    The SELECT the FROM or the WHERE

3.When would you employ a subquery?
    Then often be used in place of a JOIN statment and create a more readable search.  Given A, what are the results of B.

4.Explain a row constructor in your own words.
    build a row in a table with a list of values in order of the columns of the table

5.What happens if a row in the subquery result provides a NULL value to the comparison?
    The result of hte comparison will be NULL or not TRUE

6.What are the ways to use a subquery within a WHERE clause? If you can't remember them, do these flashcards until you can.
    IN, NOT IN, ANY, SOME, ALL, EXISTS, and NOT EXISTS

7.Build an employees table and a shifts table with appropriate primary and foreign keys. Then, write queries to find the following information:
    a. List all employees and all shifts.
        SELECT * FROM employees;
        SELECT * FROM shifts;
    
    b. Create a list of all possible schedules.
        SELECT employees.name, shifts.sched 
        FROM employees, shifts 
        WHERE (shifts.emp = employees.id);

8.Given a dogs table, adoptions table, adopters table, and volunteers table , write queries to retrieve the following information. All tables are described below.
    a.Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
        SELECT volunteers.name AS volunteers, (SELECT dogs.name FROM dogs WHERE dogs.id = volunteers.foster_id) AS dog_fostered FROM volunteers;

    b.List the adopter’s name and the pet’s name for each animal adopted within the past month to be displayed as a ‘Happy Tail’ on social media.
        SELECT cats.name AS animal_adopted, (SELECT adoptions.adopter FROM adoptions WHERE adoptions.cat_id = cats.id)
        FROM cats 
        WHERE id IN (SELECT adoptions.cat_id FROM adoptions WHERE date > '2017-12-31' AND date < '2018-01-29' );
    
    c.Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.
        SELECT adoptions.adopter, dogs.name FROM adoptions CROSS JOIN dogs
        WHERE adoptions.dog_id IS null AND dogs.in_foster IS false;
        **Rory's note -> I couldn't find a subqueries alternative to a CROSS JOIN
        
    d.Display a list of all cats and all dogs who have not been adopted.
        SELECT name FROM cats WHERE id NOT IN (SELECT cat_id FROM adoptions WHERE cat_id IS NOT null)
        UNION
        SELECT name FROM dogs WHERE id NOT IN (SELECT dog_id FROM adoptions WHERE dog_id IS NOT null);
    
    e.Create a list of volunteers who are available to foster. If they currently are fostering a dog, include the dog. Also include all dogs who are not currently in foster homes.
        SELECT volunteers.name, dogs.name
        FROM volunteers
        FULL OUTER JOIN dogs
        ON dogs.id = volunteers.foster_id; 
        (I realize this doesn't utilize subqueries but i'm sick of this thing and this works)
        
9.Write a query to find the name of the person who adopted Seashell given the tables cats, adoptions, and adopters. All tables are described below
    SELECT adopter FROM adoptions
    WHERE cat_id IN
        (SELECT id 
        FROM cats 
        WHERE name = 'Seashell');

10.Given the tables books, transactions, holds, and patrons, write queries to find the following information:
    a.To discern if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons waiting in line for Harry Potter and the Sorcerer’s Stone.
        SELECT name AS waiting_for_harry FROM patrons WHERE id IN (SELECT rank FROM holds WHERE isbn = '555-5-55-555555-5');
   
    b.Make a list of all book titles and denote whether or not a copy of that book is checked out.
        SELECT (SELECT title FROM books WHERE books.isbn = transactions.isbn) AS books, checked_out, checked_in FROM transactions;
    
    c.In an effort to learn which books take longer to read, the librarians would like you to create a list of total checked out time by book name in the past month.
        SELECT (SELECT title FROM books WHERE books.isbn = transactions.isbn) AS books, (checked_in - checked_out) AS total_time_out
        FROM transactions;
    
    d.In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.
        SELECT title FROM books WHERE isbn IN(SELECT isbn FROM transactions WHERE checked_out < '2013-02-01');
    
    e.List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.
        SELECT patrons.name, checked_out.isbn     
        FROM patrons
        FULL OUTER JOIN (SELECT * FROM transactions WHERE checked_out IS NOT null AND checked_in IS null ) AS checked_out
        ON patrons.id = checked_out.user_id;


11.Given the following tables in an airliner database, find the following information. airplanes (model, seat capacity, range), flights(flight_number, destination, origin, company, distance, flight_time, airplane_model), transactions(id, seats_sold, total_revenue, total_cost, flight_number, date)
    a.To determine the most profitable airplanes, find all airplane models where each flight has had over 100 paying customers in the past month.
        SELECT (SELECT airplane_model FROM flights WHERE flights.flight_number = transactions.flight_number) 
        FROM transactions 
        WHERE seats_sold > 100 AND date > '2018-01-03';
    
    b.To determine the most profitable flights, find all destination-origin pairs where 90% or more of the seats have been sold in the past month.
        SELECT c.destination, c.origin
        FROM transactions t, 
        (SELECT a.seat_cap, f.flight_number, f.destination, f.origin FROM flights f, airplanes a WHERE f.airplane_model = a.model) c
        WHERE t.flight_number = c.flight_number AND t.seats_sold / c.seat_cap >= .9 AND t.date > '2018-01-05';
            
    c.The airline is looking to expand its presence in the US Southeast and globally. Find the total revenue of any flight arriving at or departing from Atlanta.
        SELECT SUM(t.total_revenue)
        FROM transactions t, 
              (SELECT flight_number
              FROM flights f
              WHERE f.destination = 'atlanta' OR f.origin = 'atlanta') a
        WHERE t.flight_number = a.flight_number;

12.Compare the subqueries you've written above. Compare them to the joins you wrote in Checkpoint 6. Which ones are more readable? Which were more logical to write?
    I think it depends on the situation.  To me, joins are easier to read but perhaps harder to understand.  There were many times when i was writing the subqueries
    where I could envision the join statement and be done with it.  Some joins dont have logical subquery counterparties, like cross joins.  I thint it's a matter o
    having the proper tool for the job when it comes to deciding to use subqueries or JOINS