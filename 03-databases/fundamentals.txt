1.List the commands for adding, updating, and deleting data
    adding:     INSERT INTO (table) VALUES (values)
    updating:   UPDATE (table) SET (values) WHERE (value referenced)
    delete:     DELETE FROM (table) WHERE (value referenced) 

2.Explain the structure for each type of command.
    First you state which command you want to execute, then specify which table you want to modify, then which values in that table you want to modify.

3.What are some the data types that can be used in tables? Give a real world example of each.
    Numeric Types: Integers, Arbitrary Precision Numbers, Floating-Point Types, Serial Types
    Monetary Types
    Character Types
    Binary Data Types
    Date/Time Types
    Boolean Types

4.Think through how to create a new table to hold a list of people invited to a wedding. This table needs to have first and last name, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

    a. Which data type would you use to store each of the following pieces of information?
        i. First and last name.
            VARCHAR(15) VARCHAR(20)
        ii. Whether they sent in their RSVP.
            BOOLEAN
        iii. Number of guests.
            INTEGER
        iv. Number of meals.
            INTEGER
    b. Write a command that makes the table to track the wedding.
            CREATE TABLE wedding ( ID integer, FIRST_NAME varchar(15), LAST_NAME varchar(20), RECEIVED RSVP? boolean, NUMBER_GUESTS integer, NUMBER_MEALS integer);
            
    c. Using the table we just created, write a command that adds a column to track whether they were sent a thank you card.
            ALTER TABLE wedding ADD COLUMN Thankyou_card? boolean SET DEFAULT false;
            
    d. You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.
            ALTER TABLE wedding DROP COLUMN number_meals;
            
    e. The guests are going to need a place to sit at the reception, so write a statement that adds a column for table number.
            ALTER TABLE wedding ADD COLUMN table_number integer;
    
    f. The wedding is over and we do not need to keep this information, so write a command that deletes the wedding table from the database.
            DROP TABLE weddings;

5.Write a command to make a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.
    CREATE TABLE library ( ISBN bigint, TITLE varchar(200), AUTHOR varchar(50), GENRE varchar(15), PUBLISHING_DATE date, NUMBER_COPIES integer, AVAILABLE_COPIES integer);

    a. Find three books and add their information to the table.
        INSERT INTO library (isbn, title, author, genre, publishing_date, number_copies, available_copies)
        VALUES
        (1111111111111, 'book1', 'rory', 'sci-fi', 1/12/2018, 1, 2),
        (2222222222222, 'book2', 'rory', 'fantasy', 1/11/2018, 2, 3),
        (3333333333333, 'book3', 'rory', 'non-fiction', 1/10/2018, 2, 3);
        
    b. Say that someone has just checked out one of the books. Change the available copies column to 1 less.
        UPDATE library SET available_copies=1 WHERE isbn=1111111111111;
        
    c. Now one of the books has been added to the banned books list. Remove it from the table.
        DELETE FROM library WHERE isbn=3333333333333;

6. Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and approximate miles from Earth.
    CREATE TABLE spacecrafts (ID integer, NAME varchar(50), LAUNCH_DATE date, COUNTRY_ORIGIN varchar(25), MISSION varchar(500), ORBITING varchar(30), OPERATING? boolean, APPROX_MILES_FROM_EARTH integer);
    
    a. Add 3 non-Earth-orbiting satellites to the table.
        INSERT INTO spacecrafts (id, name, launch_date, country_origin, mission, orbiting, operating?, approx_miles_from_earth)
        VALUES
        (1, 'Donald', 1/12/2018, 'USA', 'search for intelligent life', 'pluto', false, 350000),
        (2, 'Mike', 1/11/2018, 'USA', 'search for minerals', 'venus', false, 1500),
        (3, 'Ivanka' 1/10/2018, 'USA', 'scouting', 'mars', true, 3000);
        
    b. Remove one of the satellites from the table since it has just been crashed into the planet.
        DELETE FROM library WHERE id=1;
        
    c. Edit another satellite because it is no longer operating and change the value to reflect that.
        UPDATE spacecrafts SET operating?=false WHERE id=3;

7.Write a command to make a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not it’s been read, and the id of the email chain it’s in.
    CREATE TABLE emails (ID integer, SUBJECT varchar(100), SENDER varchar(35), CC's varchar(200), BODY text, TIMESTAMP date, READ? boolean, EMAIL_CHAIN_ID integer);

    a. Add 3 new emails to the inbox.
        INSERT INTO emails (id, subject, sender, cc's, body, timestamp, read?, email_chain_id)
        VALUES
        (1, 'russia', 'donald', 'jeff sessions', 'mike pence', 'lots of stuff', 1/12/2018, false, 1),
        (2, 'what russians?', 'paul manafort', 'donald', 'nothing to see here', 1/11/2018, true, 2),
        (3, 'no collusion', 'mike flynn' 'donald', 'i'm innocent see!', 1/10/2018, false, 3);
        
    b. You’ve just deleted one of the emails, so write a command to remove the row from the inbox table.
        DELETE FROM emails WHERE id=3;
        
    c. You started reading an email but just heard a crash in another room. Mark the email as unread before investigating, so you can come back to it later.
        UPDATE emails SET read?=false WHERE ID=2;